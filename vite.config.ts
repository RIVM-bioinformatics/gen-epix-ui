/// <reference types="vitest" />

import {
  globSync,
  writeFileSync,
} from 'fs';
import { join } from 'path';

import react from '@vitejs/plugin-react-swc';
import svgr from 'vite-plugin-svgr';
import dts from 'vite-plugin-dts';
import { libInjectCss } from 'vite-plugin-lib-inject-css';
import type { UserConfig } from 'vite';
import { viteStaticCopy } from 'vite-plugin-static-copy';

const createIndex = () => {
  const indexFilePath = join(__dirname, 'src', 'index.ts');
  let indexContent = `// This file is auto-generated by Vite. Do not edit manually.\n\n`;
  globSync([
    join(__dirname, 'src', '**/index.ts'),
    join(__dirname, 'src', 'data', '*.ts'),
    join(__dirname, 'src', 'models', '*.ts'),
  ]).forEach((file) => {
    const relativePath = file.replace(`${__dirname}/src/`, '');
    if (relativePath === 'index.ts') {
      return;
    }
    indexContent += `export * from './${relativePath.replace(/\/index\.ts$/, '')}';\n`;
  });
  writeFileSync(indexFilePath, indexContent, 'utf8');
  return './src/index.ts';
};

// https://vitejs.dev/config/
export default {
  plugins: [
    react({ tsDecorators: true }),
    svgr(),
    libInjectCss(),
    dts({
      insertTypesEntry: true,
      rollupTypes: true,
      tsconfigPath: './tsconfig.json',
    }),
    viteStaticCopy({
      targets: [
        {
          src: [
            './src/@types/**/*.d.ts',
          ],
          dest: './',
        },
      ],
    }),
  ],
  build: {
    rollupOptions: {
      external: ['react', 'react-dom', 'i18next', 'react-i18next'],
      treeshake: true,
    },
    copyPublicDir: false,
    lib: {
      fileName: () => {
        return 'index.js';
      },
      entry: createIndex(),
      formats: ['es'],
    },
  },
  optimizeDeps: {
    esbuildOptions: {
      tsconfig: 'tsconfig.json',
    },
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    testTimeout: 5000,
  },
} satisfies UserConfig;
